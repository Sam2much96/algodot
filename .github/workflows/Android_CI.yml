name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  
  
jobs:
        
  build-android:
    # Note: even though Android builds for another architecture than Linux, it can reuse downloaded crates (source code, maybe 'cargo check').
    
    #continue-on-error: ${{ matrix.rust == 'nightly' }}
    #strategy:
    #  matrix:
    #    rust: [stable]




    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy
            
       # `cargo check` command here will use installed `nightly`
      # as it is set as an "override" for current directory

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          
      - name: "Install Java + NDK"
        run: |
          # aarch64 and armv7 cover most Android phones & tablets.
          rustup target add aarch64-linux-android armv7-linux-androideabi
          sudo apt-get update
          sudo apt-get install llvm-dev libclang-dev clang g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross
      # Relies on ls listing alphabetically, NDK versions having fixed
      # digits, and the folder not containing any other files
      - name: "Find highest Android NDK version"
        run: |
          highestNdk=$(ls $ANDROID_SDK_ROOT/ndk | tail -n1)
          echo "Highest Android NDK: $highestNdk"
          echo "ANDROID_NDK_VERSION=$highestNdk" >> $GITHUB_ENV
      # See https://github.com/godot-rust/godot-rust/pull/920
      - name: "Found version ${{ env.ANDROID_NDK_VERSION }}. Workaround Rust bug..."
        run: >
          find -L $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION -name libunwind.a
          -execdir sh -c 'echo "INPUT(-lunwind)" > libgcc.a' \;
      - name: "Install & Build OpenSSL"
        run: |
          
          #git clone android opn ssl
          git clone "https://github.com/Sam2much96/openssl_android"
          
          cd ${{ github.workspace }}/openssl_android
   
          PATH=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++
          ANDROID_API=21
          CONFIGURE_PLATFORM=android-arm
          ARCHITECTURE=$CONFIGURE_PLATFORM
          PROJECT_HOME=`pwd`
          PATH_ORG=$PATH
          OUTPUT_DIR=${{ github.workspace }}/openssl_android
          export CFLAGS="-Wno-macro-redefined -O3"
          ./Configure  $CONFIGURE_PLATFORM -D__ANDROID_API__=$ANDROID_API shared threads no-asm no-sse2 no-ssl2 no-ssl3 no-comp no-hw no-engine
          make build_libs -j8
          mkdir -p ../$OUTPUT_DIR/${ARCHITECTURE}
          file libcrypto.so
          file libssl.so    	
          cp libcrypto.a ../$OUTPUT_DIR/${ARCHITECTURE}/libcrypto.a
          cp libssl.a ../$OUTPUT_DIR/${ARCHITECTURE}/libssl.a
          cp libcrypto.so ../$OUTPUT_DIR/${ARCHITECTURE}/libcrypto.so
          cp libssl.so ../$OUTPUT_DIR/${ARCHITECTURE}/libssl.so
          
          #reset cd
          cd ..
          
          #verify openssl android compile
          cd $OUTPUT_DIR/${ARCHITECTURE} && ls -al
          
          
          
          #copy openssl file
          #cp libcrypto.so ${{ github.workspace }}/openssl_android
          #cp libssl.so ${{ github.workspace }}/openssl_android
          
          #reset cd
          cd
           
      
          #copy include files and ssl libraries
          #sudo cp -a ${{ github.workspace }}/openssl_android/openssl-1.1.1l/include ${{ github.workspace }}/openssl_android
          
          #cp ${{ github.workspace }}/openssl_android/libs/android/clang/android-arm/libcrypto.so ${{ github.workspace }}/openssl_android
          #cp ${{ github.workspace }}/openssl_android/libs/android/clang/android-arm/libssl.so ${{ github.workspace }}/openssl_android
          
       
         
          #cd ${{ github.workspace }}/openssl_android/libs/android/clang/android-arm && ls *.so
          
          
      - name: "Install Rust NDK"
        run: |
          cargo install cargo-ndk
          
      - name: "Check workspace"
        run: |
         cd ${{ github.workspace }}/openssl_android/libs/android/clang/android-arm && ls -al
      
      - name: "Build Rust for targets: armv7-linux-androideabi" # aarch64-linux-android
        run: |
          
        
          #link external libraries
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++
          
          
          #export ARMV7_LINUX_ANDROIDEABI_OPENSSL_LIB_DIR="openssl_android/libs/android/clang/android-arm/ssl" #buggy
          
          export OPENSSL=${{ github.workspace }}/openssl_android/libs/android/clang/android-arm #arm
          
          export OPENSSL_LIB_DIR=${{ github.workspace }}/openssl_android
          export PKG_CONFIG_PATH=${{ github.workspace }}/openssl_android
          
          PKG_CONFIG_ALLOW_CROSS_armv7_linux_androideabi=1
          
         
          export ANDROID_NDK_VERSION=25.1.8937393





          export OPENSSL_DIR=${{ github.workspace }}/openssl_android #incompatible with android

          export ARMV7_LINUX_ANDROIDEABI_OPENSSL_DIR=${{ github.workspace }}/openssl_android

          export TOOLCHAIN=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64

          export TARGET=armeabi-v7a


          export DEBUG= true

          
          cargo ndk -t armeabi-v7a  -o ./jniLibs build --release
          
          #cargo build --target aarch64-linux-android --release
          #cargo build --target armv7-linux-androideabi --release 
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: "android armv7-linux-androideabi"
          path: target/armv7-linux-androideabi/release/libalgodot.so

      
