name: Android CI

on:
  push:
    branches: [Godot-3.5-DEV]
  schedule:
    - cron: '30 5,17 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  OPENSSL_VERSION: openssl-1.1.1l

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: 
          - armeabi-v7a
          - arm64-v8a
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "Godot-3.5-DEV"
          
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1.0.4
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Run cargo check
        uses: actions-rs/cargo@v1.0.1
        with:
          command: check
          
      - name: "Install Java + NDK"
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi
          sudo apt-get update
          sudo apt-get install llvm-dev libclang-dev clang g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross

      - name: "Find highest Android NDK version"
        run: |
          highestNdk=$(ls $ANDROID_SDK_ROOT/ndk | tail -n1)
          echo "Highest Android NDK: $highestNdk"
          echo "ANDROID_NDK_VERSION=$highestNdk" >> $GITHUB_ENV

      - name: "Workaround Rust bug with NDK version ${{ env.ANDROID_NDK_VERSION }}"
        run: >
          find -L $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION -name libunwind.a
          -execdir sh -c 'echo "INPUT(-lunwind)" > libgcc.a' \;

      - name: "Build OpenSSL for ${{ matrix.target }}"
        run: |
          if [[ -z "${ANDROID_NDK_HOME}" ]]; then
            export ANDROID_NDK_HOME=~/Android/Sdk/ndk/${{ env.ANDROID_NDK_VERSION }}
          fi
          wget "https://www.openssl.org/source/${{ env.OPENSSL_VERSION }}.tar.gz"
          tar xfz "${{ env.OPENSSL_VERSION }}.tar.gz"

          PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH

          ./Configure android-${{ matrix.target }} -D__ANDROID_API__=21 shared no-asm
          make -j8

          mkdir -p openssl_android/${{ matrix.target }}
          cp libcrypto.a openssl_android/${{ matrix.target }}/libcrypto.a
          cp libssl.a openssl_android/${{ matrix.target }}/libssl.a
          cp libcrypto.so openssl_android/${{ matrix.target }}/libcrypto.so
          cp libssl.so openssl_android/${{ matrix.target }}/libssl.so
          cp -a include openssl_android/${{ matrix.target }}/include
          
      - name: "Upload OpenSSL for ${{ matrix.target }}"
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSSL dependencies ${{ matrix.target }}"
          path: openssl_android/${{ matrix.target }}
          
      - name: "Install Rust NDK"
        run: cargo install cargo-ndk

      - name: "Build Rust for target ${{ matrix.target }}"
        run: |
          export CARGO_TARGET_${{ matrix.target | to_upper }}_LINUX_ANDROID_LINKER=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.target }}-linux-android21-clang++
          cargo ndk -t ${{ matrix.target }} -o ./jniLibs build --release
          
      - name: "Upload Rust artifact for ${{ matrix.target }}"
        uses: actions/upload-artifact@v4
        with:
          name: "android ${{ matrix.target }}"
          path: target/${{ matrix.target }}-linux-android/release/libalgodot.so

  Itch_io:
    runs-on: ubuntu-22.04
    needs: build-android
    steps:
      - name: Download content
        uses: actions/download-artifact@v4
        with:
          name: linux

      - name: Archive site content
        uses: thedoctor0/zip-release@master
        with:
          filename: site.zip

      - name: Butler Publish
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: linux
          ITCH_GAME: dystopia-app
          ITCH_USER: inhumanity-arts
          PACKAGE: ./site.zip
