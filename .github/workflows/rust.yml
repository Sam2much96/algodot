name: CI

# Continuous Integration w/ Godot Engine and private Algorand Network
# Godot CI inspired by: https://github.com/godot-rust/godot-rust/tree/master/.github/workflows

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

  GODOT_VER: "3.4"
  GODOT_REL: stable

  SANDBOX_CONFIG: rust/test/sandbox/config.test
  SANDBOX_GENESIS: rust/test/sandbox/genesis/genesis.json

  # Because of genesis.json this account will start with some funds
  ALGODOT_FUNDER_MNEMONIC: "version hand outdoor sting spawn warrior noise rose lift faint apart shaft clerk melt deal soft shop pool sister collect armed planet mixed absent unfair"

defaults:
  run:
    working-directory: rust


jobs:
  rustfmt-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: rustfmt
        run: cargo fmt --all -- --check
        
      - name: clippy
        run: cargo clippy --workspace -- -D warnings

  test:
    name: test-${{ matrix.os }}
    needs: rustfmt-clippy
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
    
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
          
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
        working-directory: .
      
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Compile tests
        run: cargo test --workspace --no-run
      
      - name: Test
        run: cargo test --workspace

  build-release:
    name: build-release-${{ matrix.os }}
    needs: rustfmt-clippy
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
    
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
          
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
        working-directory: .
      
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Release build (check only)
        run: cargo check --release
    

  integration-test-godot:
    name: itest-godot
    needs: rustfmt-clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check cache for installed Godot version
        id: cache-godot
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/godot_bin
          key: godot-${{ runner.os }}-v${{ env.GODOT_VER }}-${{ env.GODOT_REL }}

      - name: Install Godot
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          wget "https://downloads.tuxfamily.org/godotengine/$GODOT_VER/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64.zip" -O /tmp/godot.zip
          unzip /tmp/godot.zip -d ${{ runner.temp }}/godot_bin

      - name: Check cache for Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-layer-caching-${{ github.workflow }}-${{ hashFiles(env.SANDBOX_CONFIG, env.SANDBOX_GENESIS) }}-{hash}
          restore-keys: docker-layer-caching-${{ github.workflow }}-${{ hashFiles(env.SANDBOX_CONFIG, env.SANDBOX_GENESIS) }}-

      - name: Algorand private network
        id: sandbox
        uses: lucasvanmol/algorand-sandbox-action@v1
        with:
          config: ${{ env.SANDBOX_CONFIG }}

      - name: Build Algodot
        run: cargo build
        
      - name: Run Godot integration tests
        run: |
          cd test;
          mkdir -p ./project/lib;
          cp ../target/debug/libalgodot.so ./project/lib/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/ > >(tee "${{ runner.temp }}/stdout.log");
          if grep -q "Leaked instance" "${{ runner.temp }}/stdout.log"; then
            exit 1;
          fi;

  
