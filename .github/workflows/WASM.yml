
name: WASM CI

on:
  push:
    branches: [ Godot-3.5-DEV ]
  schedule:
    # Documentation : https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 5,17 * * *'
    
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  OPENSSL_VERSION: openssl-1.1.1l
  TOOLCHAIN: nightly
  TARGETS: wasm-unknown-emscripten
  
  
jobs:
        
  build-WASM:
    # Note: even though Android builds for another architecture than Linux, it can reuse downloaded crates (source code, maybe 'cargo check').
    
    #continue-on-error: ${{ matrix.rust == 'nightly' }}
    #strategy:
    #  matrix:
    #    rust: [stable]




    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install specific nightly for wasm builds
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy
            target: wasm32-unknown-emscripten

      - name: "Setup for WASM compile"

        run: |
          cd /home/runner/work/algodot/algodot
          
          #Modify Cargo.toml for WASM Compile

          sed -i '/^\[workspace\]/,/\]/ {
              r /dev/stdin
              d
          }' Cargo.toml << 'EOF'
          [package]
          name = "Algodot"
          version = "0.2.0"
          edition = "2021"
          
          [lib]
          crate-type = ["cdylib"]
          path = "algodot/src/algod/mod.rs"
          
          [dependencies]
          algonaut = { git = "https://github.com/manuelmauro/algonaut", branch = "dependabot/cargo/ring-0.17.5"  }
          algonaut_algod = { git = "https://github.com/manuelmauro/algonaut", package="algonaut_algod",branch = "dependabot/cargo/ring-0.17.5" }
          algonaut_core = { git = "https://github.com/manuelmauro/algonaut", package="algonaut_core",branch = "dependabot/cargo/ring-0.17.5" }
          algonaut_transaction = { git = "https://github.com/manuelmauro/algonaut", package="algonaut_transaction",branch = "dependabot/cargo/ring-0.17.5" }
          algodot_abi = { path = "abi" }
          algodot_core = { path = "core" }
          algodot_macros = { path = "macros" }
          gdnative = { version = "0.11", features = ["async"] }
          
          [workspace]
          members = [
              "algodot",
              "macros"
          ]
          EOF


          # Check Toml file
          cat Cargo.toml && cd 
          sudo apt-get update -y
          sudo apt-get install llvm-dev libclang-dev clang g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross make gcc emscripten -y

          # check emscripten
          emcc -v

          # Go to root dir
          cd && ls -al
          
          #create config file
          cd .cargo

          #check Cargo Config
          touch config.toml

          #edit config.toml to build to target wasm emscripten
          cat <<EOT >> config.toml
          [build]
          target = "wasm32-unknown-emscripten"

          [target.wasm32-unknown-emscripten]
          rustflags = [
              "-Clink-arg=-sSIDE_MODULE=2", # build a side module that Godot can load
              "-Zlink-native-libraries=no", # workaround for a wasm-ld error during linking
              "-Cpanic=abort", # workaround for a runtime error related to dyncalls
          ]
          EOT
          
          #check Cargo Config
          cat  config.toml

          # Leave Cargo Dir
          cd 
          

      - name: "WASM and Emscripten SDK Setup"
        run: |
          # Setup Other Compile Dependencies For nightly 1.69
             
          # Downgrade Bumpalo Module for cargo build for Nightly Compile
           cargo update -p bumpalo@3.16.0 --precise 3.14.0

   

          # Downgrading Ahash Module to Remove an unstable feature from the nightly build toolchain causing an error
           cargo update -p ahash --precise 0.8.9

          
          # Get the emsdk repo
          git clone https://github.com/emscripten-core/emsdk.git

          # Enter that directory
          cd emsdk
          
          # Download and install the latest SDK tools.
          ./emsdk install latest

          # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
          ./emsdk activate latest

          # Activate PATH and other environment variables in the current terminal
          source ./emsdk_env.sh

      - name: "Compile Openssl 1.1l For WASM"
        run: |

          # Workspace Directory
          ls -al
          
          # check compiler 
          emcc -v
          
          wget  "https://www.openssl.org/source/${OPENSSL_VERSION}.tar.gz"
          tar -xzvf ${OPENSSL_VERSION}.tar.gz
          
          cd ${OPENSSL_VERSION}
          
          
          #Configure OpenSSL for Emscripten:
          source ../emsdk/emsdk_env.sh
          
          #emconfigure ./Configure no-asm no-shared no-threads no-dso no-engine no-hw --prefix=/openssl-wasm --openssldir=/openssl-wasm linux-generic32
          emconfigure ./Configure
          ls -al

          # Compile
          emmake make

          # Install
          emmake make install

          ls -al
          
          # copy compiled Assembly Files to sub directory
          #mkdir -p precompiled/lib
          #cp *.a precompiled/lib


          # Copy Header Files
          #mkdir -p precompiled/include
          #cp -r include/openssl precompiled/include

          


      - name: "WASM compile"
        run: |
          # Linux
           source ${{ github.workspace }}/emsdk/emsdk_env.sh
           
           export OPENSSL=${{ github.workspace }}/${OPENSSL_VERSION}
           export OPENSSL_DIR=${{ github.workspace }}/${OPENSSL_VERSION}
           export OPENSSL_LIB_DIR=${{ github.workspace }}/${OPENSSL_VERSION}
           
           export C_INCLUDE_PATH=$EMSDK/upstream/emscripten/cache/sysroot/include
          
           # Build Command To Wasm
           RUST_BACKTRSCE=full cargo build --target=wasm32-unknown-emscripten --release

      - name: Upload Artifact openssl and algodot
        uses: actions/upload-artifact@v4
        with:
            name: "Openssl Wasm"
            compression-level: 9 # maximum compression
            path: |
                ${{ github.workspace }}/${OPENSSL_VERSION}/precompiled/lib
                ${{github.workspace}}/target/wasm32-unknown-emscripten
