name: WASM CI

on:
  push:
    branches: [ Godot-3.5-DEV ]
  schedule:
    # Documentation : https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 5,17 * * *'
    
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  OPENSSL_VERSION: openssl-1.1.1l
  GDNATIVE: /depreciated/path/to/gdnative rust crate in cargo repository
  
  
jobs:
        
  build-WASM:
    # Note: even though Android builds for another architecture than Linux, it can reuse downloaded crates (source code, maybe 'cargo check').
    
    #continue-on-error: ${{ matrix.rust == 'nightly' }}
    #strategy:
    #  matrix:
    #    rust: [stable]




    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install specific nightly for wasm builds
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly-2023-01-27
            override: true
            components: rustfmt, clippy
            target: wasm32-unknown-unknown

      - name: "Setup for WASM compile"

        run: |
          cd /home/runner/work/algodot/algodot
          
          #Modify Cargo.toml for WASM & downgrade bumpalo module

          sed -i '/^\[workspace\]/,/\]/ {
              r /dev/stdin
              d
          }' Cargo.toml << 'EOF'
          [package]
          name = "Algodot"
          version = "0.2.0"
          edition = "2021"
          
          [lib]
          crate-type = ["cdylib"]
          path = "algodot/src/algod/mod.rs"
          
          [dependencies]
          algonaut = { git = "https://github.com/manuelmauro/algonaut", version = "0.4.2" }
          algodot_abi = { path = "abi" }
          algodot_core = { path = "core" }
          algodot_macros = { path = "macros" }
          gdnative = { version = "0.11", features = ["async"] }
          
          [workspace]
          members = [
              "algodot",
              "macros"
          ]
          EOF


          # Check Toml file
          cat Cargo.toml && cd 
          sudo apt-get update -y
          sudo apt-get install llvm-dev libclang-dev clang g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross emscripten

          # check emscripten
          emcc -v
          
       # `cargo check` command here will use installed `nightly`
      # as it is set as an "override" for current directory

      #- name: Run cargo check
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: check
          
      - name: "Compile & install Openssl 1.1l"
        run: |
          sudo apt install make gcc -y
          wget  "https://www.openssl.org/source/${OPENSSL_VERSION}.tar.gz"
          tar -xzvf ${OPENSSL_VERSION}.tar.gz
          
          cd ${OPENSSL_VERSION}
          ./config --prefix=/opt/openssl --openssldir=/usr/local/ssl
          make
          sudo make install
          
      - name: "WASM and Emscripten SDK Setup"
        run: |
          # Setup Other Compile Dependencies For nightly 1.69
             
          # Downgrade Bumpalo Module for cargo build for Nightly Compile
          cargo update -p bumpalo@3.16.0 --precise 3.14.0

          # Upgrade Ring Module for Cargo Build from 0.16.19 to 0.16.20
          cargo update -p ring --precise 0.16.20

          # Downgrading Ahash Module to Remove an unstable feature from the nightly build toolchain causing an error
          cargo update -p ahash --precise 0.8.9
          
          # Depreciated Install Compatible Wasm Pack for Web Assemble Compile
          # cargo +nightly-2023-01-27 install --locked wasm-pack --version 0.11.1

          # Get the emsdk repo
          git clone https://github.com/emscripten-core/emsdk.git

          # Enter that directory
          cd emsdk
          
          # Download and install the latest SDK tools.
          ./emsdk install latest

          # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
          ./emsdk activate latest

          # Activate PATH and other environment variables in the current terminal
          source ./emsdk_env.sh

          cd && ls -al
           
      - name: "WASM compile"
        run: |
          # Linux
           source ${{ github.workspace }}/emsdk/emsdk_env.sh
           
           export OPENSSL=${{ github.workspace }}/${OPENSSL_VERSION}
           export OPENSSL_DIR=${{ github.workspace }}/${OPENSSL_VERSION}
           export OPENSSL_LIB_DIR=${{ github.workspace }}/${OPENSSL_VERSION}
           
           #export X86_64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=${{ github.workspace }}/${OPENSSL_VERSION}
           export C_INCLUDE_PATH=$EMSDK/upstream/emscripten/cache/sysroot/include
          
           RUST_BACKTRSCE=full RUSTFLAGS="-Clink-arg=-sSIDE_MODULE=2 -Zlink-native-libraries=no -Cpanic=abort" cargo +nightly-2023-01-27 build --target=wasm32-unknown-unknown --release
           # error : c_uint, c_int, and c_void cannot be found in the libc crate
           #CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true RUST_BACKTRSCE=full RUSTFLAGS="-Clink-arg=-sSIDE_MODULE=2 -Zlink-native-libraries=no -Cpanic=abort" wasm-pack test --firefox
          
    
